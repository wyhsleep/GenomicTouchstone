# !/bin/bash

cd ../../..

model_path=/your/path/to/models
data_path=/your/path/to/data/

echo "Model path is set to: $model_path"
echo "Data path is set to: $data_path"


TASKs='core_promoter_annotation'


declare -A PRETRAINED_PATHS DISPLAY_NAMES MODELS TOKENIZERS MODEL_NAMES D_MODELS LRs BATCH_SIZES MAX_LENGTHS RETURN_MASKs CONFIG_PATHS

CONFIG_DNABERT3="dnabert3"
PRETRAINED_PATHS[$CONFIG_DNABERT3]="${model_path}/DNA_bert_3"
DISPLAY_NAMES[$CONFIG_DNABERT3]="dnabert-3"
MODELS[$CONFIG_DNABERT3]="dnabert"
TOKENIZERS[$CONFIG_DNABERT3]="dnabert_3"
MODEL_NAMES[$CONFIG_DNABERT3]="dna_embedding_dnabert"
D_MODELS[$CONFIG_DNABERT3]=768
LRs[$CONFIG_DNABERT3]=3e-5
BATCH_SIZES[$CONFIG_DNABERT3]=32
MAX_LENGTHS[$CONFIG_DNABERT3]=512
RETURN_MASKs[$CONFIG_DNABERT3]=true

CONFIG_DNABERT4="dnabert4"
PRETRAINED_PATHS[$CONFIG_DNABERT4]="${model_path}/DNA_bert_4"
DISPLAY_NAMES[$CONFIG_DNABERT4]="dnabert-4"
MODELS[$CONFIG_DNABERT4]="dnabert"
TOKENIZERS[$CONFIG_DNABERT4]="dnabert_4"
MODEL_NAMES[$CONFIG_DNABERT4]="dna_embedding_dnabert"
D_MODELS[$CONFIG_DNABERT4]=768
LRs[$CONFIG_DNABERT4]=3e-5
BATCH_SIZES[$CONFIG_DNABERT4]=32
MAX_LENGTHS[$CONFIG_DNABERT4]=512
RETURN_MASKs[$CONFIG_DNABERT4]=true

CONFIG_DNABERT5="dnabert5"
PRETRAINED_PATHS[$CONFIG_DNABERT5]="${model_path}/DNA_bert_5"
DISPLAY_NAMES[$CONFIG_DNABERT5]="dnabert-5"
MODELS[$CONFIG_DNABERT5]="dnabert"
TOKENIZERS[$CONFIG_DNABERT5]="dnabert_5"
MODEL_NAMES[$CONFIG_DNABERT5]="dna_embedding_dnabert"
D_MODELS[$CONFIG_DNABERT5]=768
LRs[$CONFIG_DNABERT5]=3e-5
BATCH_SIZES[$CONFIG_DNABERT5]=32
MAX_LENGTHS[$CONFIG_DNABERT5]=512
RETURN_MASKs[$CONFIG_DNABERT5]=true

CONFIG_DNABERT6="dnabert6"
PRETRAINED_PATHS[$CONFIG_DNABERT6]="${model_path}/DNA_bert_6"
DISPLAY_NAMES[$CONFIG_DNABERT6]="dnabert-6"
MODELS[$CONFIG_DNABERT6]="dnabert"
TOKENIZERS[$CONFIG_DNABERT6]="dnabert_6"
MODEL_NAMES[$CONFIG_DNABERT6]="dna_embedding_dnabert"
D_MODELS[$CONFIG_DNABERT6]=768
LRs[$CONFIG_DNABERT6]=3e-5
BATCH_SIZES[$CONFIG_DNABERT6]=32
MAX_LENGTHS[$CONFIG_DNABERT6]=512
RETURN_MASKs[$CONFIG_DNABERT6]=true

CONFIG_GROVER="grover"
PRETRAINED_PATHS[$CONFIG_GROVER]="${model_path}/GROVER"
DISPLAY_NAMES[$CONFIG_GROVER]="grover"
MODELS[$CONFIG_GROVER]="grover"
TOKENIZERS[$CONFIG_GROVER]="grover"
MODEL_NAMES[$CONFIG_GROVER]="dna_embedding_grover"
D_MODELS[$CONFIG_GROVER]=768
LRs[$CONFIG_GROVER]=1e-5
BATCH_SIZES[$CONFIG_GROVER]=32
MAX_LENGTHS[$CONFIG_GROVER]=512
RETURN_MASKs[$CONFIG_GROVER]=true

CONFIG_GENA_BERT_BASE="gena_bert_base"
PRETRAINED_PATHS[$CONFIG_GENA_BERT_BASE]="${model_path}/gena-lm-bert-base"
DISPLAY_NAMES[$CONFIG_GENA_BERT_BASE]="gena-lm-bert-base"
MODELS[$CONFIG_GENA_BERT_BASE]="genalm"
TOKENIZERS[$CONFIG_GENA_BERT_BASE]="genalm"
MODEL_NAMES[$CONFIG_GENA_BERT_BASE]="dna_embedding_genalm"
D_MODELS[$CONFIG_GENA_BERT_BASE]=768
LRs[$CONFIG_GENA_BERT_BASE]=5e-5
BATCH_SIZES[$CONFIG_GENA_BERT_BASE]=32
MAX_LENGTHS[$CONFIG_GENA_BERT_BASE]=512
RETURN_MASKs[$CONFIG_GENA_BERT_BASE]=true

CONFIG_GENA_BERT_BASE_LASTLN_T2T="gena_bert_base_lastln_t2t"
PRETRAINED_PATHS[$CONFIG_GENA_BERT_BASE_LASTLN_T2T]="${model_path}/gena-lm-bert-base-lastln-t2t"
DISPLAY_NAMES[$CONFIG_GENA_BERT_BASE_LASTLN_T2T]="gena-lm-bert-base-lastln-t2t"
MODELS[$CONFIG_GENA_BERT_BASE_LASTLN_T2T]="genalm"
TOKENIZERS[$CONFIG_GENA_BERT_BASE_LASTLN_T2T]="genalm"
MODEL_NAMES[$CONFIG_GENA_BERT_BASE_LASTLN_T2T]="dna_embedding_genalm"
D_MODELS[$CONFIG_GENA_BERT_BASE_LASTLN_T2T]=768
LRs[$CONFIG_GENA_BERT_BASE_LASTLN_T2T]=5e-5
BATCH_SIZES[$CONFIG_GENA_BERT_BASE_LASTLN_T2T]=32
MAX_LENGTHS[$CONFIG_GENA_BERT_BASE_LASTLN_T2T]=512
RETURN_MASKs[$CONFIG_GENA_BERT_BASE_LASTLN_T2T]=true

CONFIG_GENA_BERT_BASE_T2T="gena_bert_base_t2t"
PRETRAINED_PATHS[$CONFIG_GENA_BERT_BASE_T2T]="${model_path}/gena-lm-bert-base-t2t"
DISPLAY_NAMES[$CONFIG_GENA_BERT_BASE_T2T]="gena-lm-bert-base-t2t"
MODELS[$CONFIG_GENA_BERT_BASE_T2T]="genalm"
TOKENIZERS[$CONFIG_GENA_BERT_BASE_T2T]="genalm"
MODEL_NAMES[$CONFIG_GENA_BERT_BASE_T2T]="dna_embedding_genalm"
D_MODELS[$CONFIG_GENA_BERT_BASE_T2T]=768
LRs[$CONFIG_GENA_BERT_BASE_T2T]=5e-5
BATCH_SIZES[$CONFIG_GENA_BERT_BASE_T2T]=32
MAX_LENGTHS[$CONFIG_GENA_BERT_BASE_T2T]=512
RETURN_MASKs[$CONFIG_GENA_BERT_BASE_T2T]=true

CONFIG_GENA_BERT_BASE_T2T_MULTI="gena_bert_base_t2t_multi"
PRETRAINED_PATHS[$CONFIG_GENA_BERT_BASE_T2T_MULTI]="${model_path}/gena-lm-bert-base-t2t-multi"
DISPLAY_NAMES[$CONFIG_GENA_BERT_BASE_T2T_MULTI]="gena-lm-bert-base-t2t-multi"
MODELS[$CONFIG_GENA_BERT_BASE_T2T_MULTI]="genalm"
TOKENIZERS[$CONFIG_GENA_BERT_BASE_T2T_MULTI]="genalm"
MODEL_NAMES[$CONFIG_GENA_BERT_BASE_T2T_MULTI]="dna_embedding_genalm"
D_MODELS[$CONFIG_GENA_BERT_BASE_T2T_MULTI]=768
LRs[$CONFIG_GENA_BERT_BASE_T2T_MULTI]=5e-5
BATCH_SIZES[$CONFIG_GENA_BERT_BASE_T2T_MULTI]=32
MAX_LENGTHS[$CONFIG_GENA_BERT_BASE_T2T_MULTI]=512
RETURN_MASKs[$CONFIG_GENA_BERT_BASE_T2T_MULTI]=true

CONFIG_GENA_BERT_LARGE_T2T="gena_bert_large_t2t"
PRETRAINED_PATHS[$CONFIG_GENA_BERT_LARGE_T2T]="${model_path}/gena-lm-bert-large-t2t"
DISPLAY_NAMES[$CONFIG_GENA_BERT_LARGE_T2T]="gena-lm-bert-large-t2t"
MODELS[$CONFIG_GENA_BERT_LARGE_T2T]="genalm"
TOKENIZERS[$CONFIG_GENA_BERT_LARGE_T2T]="genalm"
MODEL_NAMES[$CONFIG_GENA_BERT_LARGE_T2T]="dna_embedding_genalm"
D_MODELS[$CONFIG_GENA_BERT_LARGE_T2T]=1024
LRs[$CONFIG_GENA_BERT_LARGE_T2T]=5e-5
BATCH_SIZES[$CONFIG_GENA_BERT_LARGE_T2T]=12
MAX_LENGTHS[$CONFIG_GENA_BERT_LARGE_T2T]=512
RETURN_MASKs[$CONFIG_GENA_BERT_LARGE_T2T]=true

CONFIG_GENA_LM_BIGBIRD_BASE_T2T="gena-lm-bigbird-base-t2t"
PRETRAINED_PATHS[$CONFIG_GENA_LM_BIGBIRD_BASE_T2T]="${model_path}/gena-lm-bigbird-base-t2t"
DISPLAY_NAMES[$CONFIG_GENA_LM_BIGBIRD_BASE_T2T]="gena-lm-bigbird-base-t2t"
MODELS[$CONFIG_GENA_LM_BIGBIRD_BASE_T2T]="genalm"
TOKENIZERS[$CONFIG_GENA_LM_BIGBIRD_BASE_T2T]="genalm"
MODEL_NAMES[$CONFIG_GENA_LM_BIGBIRD_BASE_T2T]="dna_embedding_genalm"
D_MODELS[$CONFIG_GENA_LM_BIGBIRD_BASE_T2T]=768
LRs[$CONFIG_GENA_LM_BIGBIRD_BASE_T2T]=5e-5
BATCH_SIZES[$CONFIG_GENA_LM_BIGBIRD_BASE_T2T]=24
MAX_LENGTHS[$CONFIG_GENA_LM_BIGBIRD_BASE_T2T]=512
RETURN_MASKs[$CONFIG_GENA_LM_BIGBIRD_BASE_T2T]=true

CONFIG_500M_1000G="500m_1000g"
PRETRAINED_PATHS[$CONFIG_500M_1000G]="${model_path}/nucleotide-transformer-500m-1000g"
DISPLAY_NAMES[$CONFIG_500M_1000G]="nucleotide-transformer-500m-1000g"
MODELS[$CONFIG_500M_1000G]="NT"
TOKENIZERS[$CONFIG_500M_1000G]="nt"
MODEL_NAMES[$CONFIG_500M_1000G]="dna_embedding_nt"
D_MODELS[$CONFIG_500M_1000G]=1280
LRs[$CONFIG_500M_1000G]=1e-5
BATCH_SIZES[$CONFIG_500M_1000G]=8
MAX_LENGTHS[$CONFIG_500M_1000G]=512  
RETURN_MASKs[$CONFIG_500M_1000G]=true


CONFIG_500M_HUMAN_REF="500m_human_ref"
PRETRAINED_PATHS[$CONFIG_500M_HUMAN_REF]="${model_path}/nucleotide-transformer-500m-human-ref"
DISPLAY_NAMES[$CONFIG_500M_HUMAN_REF]="nucleotide-transformer-500m-human-ref"
MODELS[$CONFIG_500M_HUMAN_REF]="NT"
TOKENIZERS[$CONFIG_500M_HUMAN_REF]="nt"
MODEL_NAMES[$CONFIG_500M_HUMAN_REF]="dna_embedding_nt"
D_MODELS[$CONFIG_500M_HUMAN_REF]=1280
LRs[$CONFIG_500M_HUMAN_REF]=1e-5
BATCH_SIZES[$CONFIG_500M_HUMAN_REF]=16
MAX_LENGTHS[$CONFIG_500M_HUMAN_REF]=512
RETURN_MASKs[$CONFIG_500M_HUMAN_REF]=true

CONFIG_2_5B_1000G="2_5b_1000g"
PRETRAINED_PATHS[$CONFIG_2_5B_1000G]="${model_path}/nucleotide-transformer-2.5b-1000g"
DISPLAY_NAMES[$CONFIG_2_5B_1000G]="nucleotide-transformer-2.5b-1000g"
MODELS[$CONFIG_2_5B_1000G]="NT"
TOKENIZERS[$CONFIG_2_5B_1000G]="nt"
MODEL_NAMES[$CONFIG_2_5B_1000G]="dna_embedding_nt"
D_MODELS[$CONFIG_2_5B_1000G]=2560
LRs[$CONFIG_2_5B_1000G]=1e-5
BATCH_SIZES[$CONFIG_2_5B_1000G]=14
MAX_LENGTHS[$CONFIG_2_5B_1000G]=512 
RETURN_MASKs[$CONFIG_2_5B_1000G]=true

CONFIG_2_5B_MULTI_SPECIES="2_5b_multi_species"
PRETRAINED_PATHS[$CONFIG_2_5B_MULTI_SPECIES]="${model_path}/nucleotide-transformer-2.5b-multi-species"
DISPLAY_NAMES[$CONFIG_2_5B_MULTI_SPECIES]="nucleotide-transformer-2.5b-multi-species"
MODELS[$CONFIG_2_5B_MULTI_SPECIES]="NT"
TOKENIZERS[$CONFIG_2_5B_MULTI_SPECIES]="nt"
MODEL_NAMES[$CONFIG_2_5B_MULTI_SPECIES]="dna_embedding_nt"
D_MODELS[$CONFIG_2_5B_MULTI_SPECIES]=2560
LRs[$CONFIG_2_5B_MULTI_SPECIES]=1e-5
BATCH_SIZES[$CONFIG_2_5B_MULTI_SPECIES]=14
MAX_LENGTHS[$CONFIG_2_5B_MULTI_SPECIES]=512
RETURN_MASKs[$CONFIG_2_5B_MULTI_SPECIES]=true

CONFIG_V2_500M="v2_500m"
PRETRAINED_PATHS[$CONFIG_V2_500M]="${model_path}/nucleotide-transformer-v2-500m-multi-species"
DISPLAY_NAMES[$CONFIG_V2_500M]="nucleotide-transformer-v2-500m-multi-species"
MODELS[$CONFIG_V2_500M]="NTv2"
TOKENIZERS[$CONFIG_V2_500M]="ntv2"
MODEL_NAMES[$CONFIG_V2_500M]="dna_embedding_ntv2"
D_MODELS[$CONFIG_V2_500M]=1024
LRs[$CONFIG_V2_500M]=1e-5
BATCH_SIZES[$CONFIG_V2_500M]=16
MAX_LENGTHS[$CONFIG_V2_500M]=512
RETURN_MASKs[$CONFIG_V2_500M]=true

CONFIG_V2_250M="v2_250m"
PRETRAINED_PATHS[$CONFIG_V2_250M]="${model_path}/nucleotide-transformer-v2-250m-multi-species"
DISPLAY_NAMES[$CONFIG_V2_250M]="nucleotide-transformer-v2-250m-multi-species"
MODELS[$CONFIG_V2_250M]="NTv2"
TOKENIZERS[$CONFIG_V2_250M]="ntv2"
MODEL_NAMES[$CONFIG_V2_250M]="dna_embedding_ntv2"
D_MODELS[$CONFIG_V2_250M]=768
LRs[$CONFIG_V2_250M]=1e-5
BATCH_SIZES[$CONFIG_V2_250M]=16
MAX_LENGTHS[$CONFIG_V2_250M]=512
RETURN_MASKs[$CONFIG_V2_250M]=true

CONFIG_V2_100M="v2_100m"
PRETRAINED_PATHS[$CONFIG_V2_100M]="${model_path}/nucleotide-transformer-v2-100m-multi-species"
DISPLAY_NAMES[$CONFIG_V2_100M]="nucleotide-transformer-v2-100m-multi-species"
MODELS[$CONFIG_V2_100M]="NTv2"
TOKENIZERS[$CONFIG_V2_100M]="ntv2"
MODEL_NAMES[$CONFIG_V2_100M]="dna_embedding_ntv2"
D_MODELS[$CONFIG_V2_100M]=512
LRs[$CONFIG_V2_100M]=1e-5
BATCH_SIZES[$CONFIG_V2_100M]=24
MAX_LENGTHS[$CONFIG_V2_100M]=512
RETURN_MASKs[$CONFIG_V2_100M]=true

CONFIG_V2_50M="v2_50m"
PRETRAINED_PATHS[$CONFIG_V2_50M]="${model_path}/nucleotide-transformer-v2-50m-multi-species"
DISPLAY_NAMES[$CONFIG_V2_50M]="nucleotide-transformer-v2-50m-multi-species"
MODELS[$CONFIG_V2_50M]="NTv2"
TOKENIZERS[$CONFIG_V2_50M]="ntv2"
MODEL_NAMES[$CONFIG_V2_50M]="dna_embedding_ntv2"
D_MODELS[$CONFIG_V2_50M]=512
LRs[$CONFIG_V2_50M]=1e-5
BATCH_SIZES[$CONFIG_V2_50M]=32
MAX_LENGTHS[$CONFIG_V2_50M]=512
RETURN_MASKs[$CONFIG_V2_50M]=true

CONFIG_DNABERT2="dnabert2"
PRETRAINED_PATHS[$CONFIG_DNABERT2]="${model_path}/dnabert2-117M"
DISPLAY_NAMES[$CONFIG_DNABERT2]="dnabert2"
MODELS[$CONFIG_DNABERT2]="dnabert2"
TOKENIZERS[$CONFIG_DNABERT2]="dnabert2"
MODEL_NAMES[$CONFIG_DNABERT2]="dna_embedding_dnabert2"
D_MODELS[$CONFIG_DNABERT2]=768
LRs[$CONFIG_DNABERT2]=3e-5
BATCH_SIZES[$CONFIG_DNABERT2]=32
MAX_LENGTHS[$CONFIG_DNABERT2]=512
RETURN_MASKs[$CONFIG_DNABERT2]=true

#DNABERT-s
CONFIG_DNABERTS="dnaberts"
PRETRAINED_PATHS[$CONFIG_DNABERTS]="${model_path}/dnabert-s"
DISPLAY_NAMES[$CONFIG_DNABERTS]="dnabert-s"
MODELS[$CONFIG_DNABERTS]="dnaberts"
TOKENIZERS[$CONFIG_DNABERTS]="dnaberts"
MODEL_NAMES[$CONFIG_DNABERTS]="dna_embedding_dnaberts"
D_MODELS[$CONFIG_DNABERTS]=768
LRs[$CONFIG_DNABERTS]=3e-5
BATCH_SIZES[$CONFIG_DNABERTS]=32
MAX_LENGTHS[$CONFIG_DNABERTS]=512
RETURN_MASKs[$CONFIG_DNABERTS]=true

#GPN
CONFIG_GPN="gpn"
PRETRAINED_PATHS[$CONFIG_GPN]="${model_path}/gpn-brassicales"
DISPLAY_NAMES[$CONFIG_GPN]="gpn"
MODELS[$CONFIG_GPN]="gpn"
TOKENIZERS[$CONFIG_GPN]="gpn"
MODEL_NAMES[$CONFIG_GPN]="dna_embedding_gpn"
D_MODELS[$CONFIG_GPN]=512
LRs[$CONFIG_GPN]=1e-4
BATCH_SIZES[$CONFIG_GPN]=192
MAX_LENGTHS[$CONFIG_GPN]=512
RETURN_MASKs[$CONFIG_GPN]=true

# RNAFM
CONFIG_RNAFM="rnafm"
PRETRAINED_PATHS[$CONFIG_RNAFM]="${model_path}/rnafm"
DISPLAY_NAMES[$CONFIG_RNAFM]="rnafm"
MODELS[$CONFIG_RNAFM]="rnafm"
TOKENIZERS[$CONFIG_RNAFM]="rnafm"
MODEL_NAMES[$CONFIG_RNAFM]="dna_embedding_rnafm"
D_MODELS[$CONFIG_RNAFM]=640
LRs[$CONFIG_RNAFM]=2e-5
BATCH_SIZES[$CONFIG_RNAFM]=12
MAX_LENGTHS[$CONFIG_RNAFM]=512  # Set max_length parameter
RETURN_MASKs[$CONFIG_RNAFM]=true

# SpliceBERT
CONFIG_SPLICEBERT="splicebert"
PRETRAINED_PATHS[$CONFIG_SPLICEBERT]="${model_path}/splicebert"
DISPLAY_NAMES[$CONFIG_SPLICEBERT]="splicebert"
MODELS[$CONFIG_SPLICEBERT]="splicebert"
TOKENIZERS[$CONFIG_SPLICEBERT]="splicebert"
MODEL_NAMES[$CONFIG_SPLICEBERT]="dna_embedding_splicebert"
D_MODELS[$CONFIG_SPLICEBERT]=512
LRs[$CONFIG_SPLICEBERT]=2e-5
BATCH_SIZES[$CONFIG_SPLICEBERT]=32
MAX_LENGTHS[$CONFIG_SPLICEBERT]=1024  # Set max_length parameter
RETURN_MASKs[$CONFIG_SPLICEBERT]=true

# rnaernie
CONFIG_RNAERNIE="rnaernie"
PRETRAINED_PATHS[$CONFIG_RNAERNIE]="${model_path}/rnaernie"
DISPLAY_NAMES[$CONFIG_RNAERNIE]="rnaernie"
MODELS[$CONFIG_RNAERNIE]="rnaernie"
TOKENIZERS[$CONFIG_RNAERNIE]="rnaernie"
MODEL_NAMES[$CONFIG_RNAERNIE]="dna_embedding_rnaernie"
D_MODELS[$CONFIG_RNAERNIE]=768
LRs[$CONFIG_RNAERNIE]=2e-5
BATCH_SIZES[$CONFIG_RNAERNIE]=16
MAX_LENGTHS[$CONFIG_RNAERNIE]=512
RETURN_MASKs[$CONFIG_RNAERNIE]=true

# MistralDNA-17M
CONFIG_MISTRALDNA_17M="mistraldna_17m"
PRETRAINED_PATHS[$CONFIG_MISTRALDNA_17M]="${model_path}/Mistral-DNA-v1-17M-hg38"
DISPLAY_NAMES[$CONFIG_MISTRALDNA_17M]="mistraldna_17m"
MODELS[$CONFIG_MISTRALDNA_17M]="mistraldna"
TOKENIZERS[$CONFIG_MISTRALDNA_17M]="mistraldna"
MODEL_NAMES[$CONFIG_MISTRALDNA_17M]="dna_embedding_mistraldna"
D_MODELS[$CONFIG_MISTRALDNA_17M]=256
LRs[$CONFIG_MISTRALDNA_17M]=1e-5
BATCH_SIZES[$CONFIG_MISTRALDNA_17M]=64
MAX_LENGTHS[$CONFIG_MISTRALDNA_17M]=512
RETURN_MASKs[$CONFIG_MISTRALDNA_17M]=true

# MistralDNA-138M
CONFIG_MISTRALDNA_138M="mistraldna_138m"
PRETRAINED_PATHS[$CONFIG_MISTRALDNA_138M]="${model_path}/Mistral-DNA-v1-138M-hg38"
DISPLAY_NAMES[$CONFIG_MISTRALDNA_138M]="mistraldna_138m"
MODELS[$CONFIG_MISTRALDNA_138M]="mistraldna"
TOKENIZERS[$CONFIG_MISTRALDNA_138M]="mistraldna"
MODEL_NAMES[$CONFIG_MISTRALDNA_138M]="dna_embedding_mistraldna"
D_MODELS[$CONFIG_MISTRALDNA_138M]=768
LRs[$CONFIG_MISTRALDNA_138M]=1e-5
BATCH_SIZES[$CONFIG_MISTRALDNA_138M]=64
MAX_LENGTHS[$CONFIG_MISTRALDNA_138M]=512
RETURN_MASKs[$CONFIG_MISTRALDNA_138M]=true

# MistralDNA-422M
CONFIG_MISTRALDNA_422M="mistraldna_422m"
PRETRAINED_PATHS[$CONFIG_MISTRALDNA_422M]="${model_path}/Mistral-DNA-v1-422M-hg38"
DISPLAY_NAMES[$CONFIG_MISTRALDNA_422M]="mistraldna_422m"
MODELS[$CONFIG_MISTRALDNA_422M]="mistraldna"
TOKENIZERS[$CONFIG_MISTRALDNA_422M]="mistraldna"
MODEL_NAMES[$CONFIG_MISTRALDNA_422M]="dna_embedding_mistraldna"
D_MODELS[$CONFIG_MISTRALDNA_422M]=768
LRs[$CONFIG_MISTRALDNA_422M]=1e-5
BATCH_SIZES[$CONFIG_MISTRALDNA_422M]=32
MAX_LENGTHS[$CONFIG_MISTRALDNA_422M]=512
RETURN_MASKs[$CONFIG_MISTRALDNA_422M]=true

# MistralDNA-1.6B
CONFIG_MISTRALDNA_1_6B="mistraldna_1_6b"
PRETRAINED_PATHS[$CONFIG_MISTRALDNA_1_6B]="${model_path}/Mistral-DNA-v1-1.6B-hg38"
DISPLAY_NAMES[$CONFIG_MISTRALDNA_1_6B]="mistraldna_1.6b"
MODELS[$CONFIG_MISTRALDNA_1_6B]="mistraldna"
TOKENIZERS[$CONFIG_MISTRALDNA_1_6B]="mistraldna"
MODEL_NAMES[$CONFIG_MISTRALDNA_1_6B]="dna_embedding_mistraldna"
D_MODELS[$CONFIG_MISTRALDNA_1_6B]=768
LRs[$CONFIG_MISTRALDNA_1_6B]=1e-5
BATCH_SIZES[$CONFIG_MISTRALDNA_1_6B]=192
MAX_LENGTHS[$CONFIG_MISTRALDNA_1_6B]=512
RETURN_MASKs[$CONFIG_MISTRALDNA_1_6B]=true



CONFIG_GENERATOR_EUKARYOTE_1_2B="generator_eukaryote_1_2b"
PRETRAINED_PATHS[$CONFIG_GENERATOR_EUKARYOTE_1_2B]="${model_path}/GENERator-eukaryote-1.2b-base"
DISPLAY_NAMES[$CONFIG_GENERATOR_EUKARYOTE_1_2B]="generator_eukaryote_1_2b"
MODELS[$CONFIG_GENERATOR_EUKARYOTE_1_2B]="generator"
TOKENIZERS[$CONFIG_GENERATOR_EUKARYOTE_1_2B]="generator"
MODEL_NAMES[$CONFIG_GENERATOR_EUKARYOTE_1_2B]="dna_embedding_generator"
D_MODELS[$CONFIG_GENERATOR_EUKARYOTE_1_2B]=2048
LRs[$CONFIG_GENERATOR_EUKARYOTE_1_2B]=1e-5
BATCH_SIZES[$CONFIG_GENERATOR_EUKARYOTE_1_2B]=48
MAX_LENGTHS[$CONFIG_GENERATOR_EUKARYOTE_1_2B]=512
RETURN_MASKs[$CONFIG_GENERATOR_EUKARYOTE_1_2B]=true
# export WANDB_MODE=offline



# Modify run_model function
run_model() {
    local CONFIG_NAME=$1
    local GPU_ID=$2

    # Get values from configuration dictionary
    local PRETRAINED_PATH="${PRETRAINED_PATHS[$CONFIG_NAME]}"
    local DISPLAY_NAME="${DISPLAY_NAMES[$CONFIG_NAME]}"
    local MODEL="${MODELS[$CONFIG_NAME]}"
    local TOKENIZER="${TOKENIZERS[$CONFIG_NAME]}"
    local MODEL_NAME="${MODEL_NAMES[$CONFIG_NAME]}"
    local D_MODEL="${D_MODELS[$CONFIG_NAME]}"
    local BATCH_SIZE="${BATCH_SIZES[$CONFIG_NAME]}"
    local RETURN_MASK="${RETURN_MASKs[$CONFIG_NAME]}"
    local MAX_LENGTH="${MAX_LENGTHS[$CONFIG_NAME]}"
    local LR_ARRAY=(${LRs[$CONFIG_NAME]})

    local GPU_LIST=$(echo "${GPU_ID}" | tr ' ' ',')
    echo "Using GPUs: ${GPU_LIST}"

    local NUM_DEVICES=$(echo "${GPU_LIST}" | tr -cd ',' | wc -c)
    NUM_DEVICES=$((NUM_DEVICES + 1))
    echo "Detected ${NUM_DEVICES} GPUs."

    TASK_ARRAY=(${TASKs})

    for LR in "${LR_ARRAY[@]}"; do
        for seed in $(seq 1 1); do
            for TASK in "${TASK_ARRAY[@]}"; do
                HYDRA_RUN_DIR=${data_path}/${TASK}/finetune/${DISPLAY_NAME}/seed-${seed}_lr-${LR}
                mkdir -p "${HYDRA_RUN_DIR}"
                
                echo "*****************************************************"
                echo "gpu_id: ${GPU_LIST}, seed: ${seed}"
                CUDA_VISIBLE_DEVICES=${GPU_LIST} python -m train \
                    experiment=genomictouchstone/classification \
                    dataset.dataset_name="${TASK}" \
                    dataset.batch_size=${BATCH_SIZE} \
                    dataset.train_val_split_seed=${seed} \
                    dataset.tokenizer_name="${TOKENIZER}" \
                    dataset.dest_path=${data_path} \
                    dataset.max_length="${MAX_LENGTH}" \
                    +dataset.tokenizer_path="${PRETRAINED_PATH}" \
                    +dataset.return_mask=${RETURN_MASK} \
                    +dataset.benchmark_name="classification" \
                    model="${MODEL}" \
                    model._name_="${MODEL_NAME}" \
                    model.config.d_model=${D_MODEL} \
                    optimizer.lr="${LR}" \
                    trainer.max_epochs=10 \
                    train.pretrained_model_path="${PRETRAINED_PATH}" \
                    train.layer_decay._name_="layer_decay" \
                    trainer.devices=${NUM_DEVICES} \
                    hydra.run.dir="${HYDRA_RUN_DIR}" \
                    wandb.project="fine_tune" \
                    wandb.name="${DISPLAY_NAME}_genomictouchstone_classification_${TASK}_seed-${seed}_lr-${LR}" \
                    wandb.group="genomictouchstone_classification" \
                    +wandb.tags=["seed-${seed}"] \
                    +wandb.tags=["lr-${LR}"] \
                    wandb.job_type="genomictouchstone_classification_${TASK}"
                
                echo "*****************************************************"
            done
        done
    done
}

echo "Starting parallel execution of all configurations"

#TODO: check lr
run_model "$CONFIG_DNABERT3" 0 

wait

echo "Job finished"
